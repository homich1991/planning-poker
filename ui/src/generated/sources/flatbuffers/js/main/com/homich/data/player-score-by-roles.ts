// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PlayerScore } from '../../../com/homich/data/player-score';
import { ScoreCount } from '../../../com/homich/data/score-count';


export class PlayerScoreByRoles {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerScoreByRoles {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerScoreByRoles(bb:flatbuffers.ByteBuffer, obj?:PlayerScoreByRoles):PlayerScoreByRoles {
  return (obj || new PlayerScoreByRoles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerScoreByRoles(bb:flatbuffers.ByteBuffer, obj?:PlayerScoreByRoles):PlayerScoreByRoles {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerScoreByRoles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

role():string|null
role(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
role(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

averageScore():string|null
averageScore(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
averageScore(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

players(index: number, obj?:PlayerScore):PlayerScore|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PlayerScore()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scoreCount(index: number, obj?:ScoreCount):ScoreCount|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ScoreCount()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

scoreCountLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPlayerScoreByRoles(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRole(builder:flatbuffers.Builder, roleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, roleOffset, 0);
}

static addAverageScore(builder:flatbuffers.Builder, averageScoreOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, averageScoreOffset, 0);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScoreCount(builder:flatbuffers.Builder, scoreCountOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, scoreCountOffset, 0);
}

static createScoreCountVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startScoreCountVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPlayerScoreByRoles(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerScoreByRoles(builder:flatbuffers.Builder, roleOffset:flatbuffers.Offset, averageScoreOffset:flatbuffers.Offset, playersOffset:flatbuffers.Offset, scoreCountOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerScoreByRoles.startPlayerScoreByRoles(builder);
  PlayerScoreByRoles.addRole(builder, roleOffset);
  PlayerScoreByRoles.addAverageScore(builder, averageScoreOffset);
  PlayerScoreByRoles.addPlayers(builder, playersOffset);
  PlayerScoreByRoles.addScoreCount(builder, scoreCountOffset);
  return PlayerScoreByRoles.endPlayerScoreByRoles(builder);
}
}
