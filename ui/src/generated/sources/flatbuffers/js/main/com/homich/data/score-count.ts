// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ScoreCount {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ScoreCount {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScoreCount(bb:flatbuffers.ByteBuffer, obj?:ScoreCount):ScoreCount {
  return (obj || new ScoreCount()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScoreCount(bb:flatbuffers.ByteBuffer, obj?:ScoreCount):ScoreCount {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScoreCount()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

score():string|null
score(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
score(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_count(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

static startScoreCount(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addScore(builder:flatbuffers.Builder, scoreOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, scoreOffset, 0);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(1, count, 0);
}

static endScoreCount(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createScoreCount(builder:flatbuffers.Builder, scoreOffset:flatbuffers.Offset, count:number):flatbuffers.Offset {
  ScoreCount.startScoreCount(builder);
  ScoreCount.addScore(builder, scoreOffset);
  ScoreCount.addCount(builder, count);
  return ScoreCount.endScoreCount(builder);
}
}
